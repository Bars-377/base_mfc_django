# import schedule
# import time
# import django
# import os

# # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Django –Ω–∞—Å—Ç—Ä–æ–µ–Ω
# os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'async_mysql_project.async_mysql_project.settings')
# django.setup()

# from async_mysql_project.data_app.models import Services, Services_backup_one, Services_backup_two

# def backup_to_backup_one():
#     services = Services.objects.all()
#     for service in services:
#         Services_backup_one.objects.create(
#             id_id=service.id_id,
#             name=service.name,
#             status=service.status,
#             way=service.way,
#             initiator=service.initiator,
#             KTSSR=service.KTSSR,
#             KOSGU=service.KOSGU,
#             DopFC=service.DopFC,
#             NMCC=service.NMCC,
#             saving=service.saving,
#             counterparty=service.counterparty,
#             registration_number=service.registration_number,
#             contract_number=service.contract_number,
#             contract_date=service.contract_date,
#             end_date=service.end_date,
#             contract_price=service.contract_price,
#             execution_contract_plan=service.execution_contract_plan,
#             january_one=service.january_one,
#             february=service.february,
#             march=service.march,
#             april=service.april,
#             may=service.may,
#             june=service.june,
#             july=service.july,
#             august=service.august,
#             september=service.september,
#             october=service.october,
#             november=service.november,
#             december=service.december,
#             january_two=service.january_two,
#             execution_contract_fact=service.execution_contract_fact,
#             date_january_one=service.date_january_one,
#             sum_january_one=service.sum_january_one,
#             date_february=service.date_february,
#             sum_february=service.sum_february,
#             date_march=service.date_march,
#             sum_march=service.sum_march,
#             date_april=service.date_april,
#             sum_april=service.sum_april,
#             date_may=service.date_may,
#             sum_may=service.sum_may,
#             date_june=service.date_june,
#             sum_june=service.sum_june,
#             date_july=service.date_july,
#             sum_july=service.sum_july,
#             date_august=service.date_august,
#             sum_august=service.sum_august,
#             date_september=service.date_september,
#             sum_september=service.sum_september,
#             date_october=service.date_october,
#             sum_october=service.sum_october,
#             date_november=service.date_november,
#             sum_november=service.sum_november,
#             date_december=service.date_december,
#             sum_december=service.sum_december,
#             date_january_two=service.date_january_two,
#             sum_january_two=service.sum_january_two,
#             execution=service.execution,
#             contract_balance=service.contract_balance,
#             color=service.color,
#         )
#     print("–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Services_backup_one –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

# def backup_to_backup_two():
#     services = Services.objects.all()
#     for service in services:
#         Services_backup_two.objects.create(
#             id_id=service.id_id,
#             name=service.name,
#             status=service.status,
#             way=service.way,
#             initiator=service.initiator,
#             KTSSR=service.KTSSR,
#             KOSGU=service.KOSGU,
#             DopFC=service.DopFC,
#             NMCC=service.NMCC,
#             saving=service.saving,
#             counterparty=service.counterparty,
#             registration_number=service.registration_number,
#             contract_number=service.contract_number,
#             contract_date=service.contract_date,
#             end_date=service.end_date,
#             contract_price=service.contract_price,
#             execution_contract_plan=service.execution_contract_plan,
#             january_one=service.january_one,
#             february=service.february,
#             march=service.march,
#             april=service.april,
#             may=service.may,
#             june=service.june,
#             july=service.july,
#             august=service.august,
#             september=service.september,
#             october=service.october,
#             november=service.november,
#             december=service.december,
#             january_two=service.january_two,
#             execution_contract_fact=service.execution_contract_fact,
#             date_january_one=service.date_january_one,
#             sum_january_one=service.sum_january_one,
#             date_february=service.date_february,
#             sum_february=service.sum_february,
#             date_march=service.date_march,
#             sum_march=service.sum_march,
#             date_april=service.date_april,
#             sum_april=service.sum_april,
#             date_may=service.date_may,
#             sum_may=service.sum_may,
#             date_june=service.date_june,
#             sum_june=service.sum_june,
#             date_july=service.date_july,
#             sum_july=service.sum_july,
#             date_august=service.date_august,
#             sum_august=service.sum_august,
#             date_september=service.date_september,
#             sum_september=service.sum_september,
#             date_october=service.date_october,
#             sum_october=service.sum_october,
#             date_november=service.date_november,
#             sum_november=service.sum_november,
#             date_december=service.date_december,
#             sum_december=service.sum_december,
#             date_january_two=service.date_january_two,
#             sum_january_two=service.sum_january_two,
#             execution=service.execution,
#             contract_balance=service.contract_balance,
#             color=service.color,
#         )
#     print("–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Services_backup_two –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

# if __name__ == '__main__':
#     # –í—Ç–æ—Ä–Ω–∏–∫ (Tuesday)
#     schedule.every().tuesday.at("10:00").do(backup_to_backup_one)

#     # –ü—è—Ç–Ω–∏—Ü–∞ (Friday)
#     schedule.every().friday.at("10:00").do(backup_to_backup_two)

#     # –ü—è—Ç–Ω–∏—Ü–∞ (Friday)
#     schedule.every().wednesday.at("09:40").do(backup_to_backup_two)

#     print("backup_base.py –∑–∞–ø—É—â–µ–Ω!")

#     while True:
#         schedule.run_pending()
#         time.sleep(60)

# import schedule
# import time
# import django
# import os
# import sys

# # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (–µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–µ –∏–∑ –∫–æ—Ä–Ω—è)
# BASE_DIR = os.path.dirname(os.path.abspath(__file__))
# sys.path.append(BASE_DIR)

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
# os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'async_mysql_project.settings')
# django.setup()

# from data_app.models import Services, Services_backup_one, Services_backup_two

# def copy_service_to_model(service, backup_model):
#     fields = {f.name: getattr(service, f.name) for f in service._meta.fields if f.name != 'id'}
#     # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ backup_model (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
#     backup_model.objects.all().delete()
#     backup_model.objects.create(**fields)

# def backup_to_backup_one():
#     services = Services.objects.all()
#     for service in services:
#         copy_service_to_model(service, Services_backup_one)
#     print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Services_backup_one –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

# def backup_to_backup_two():
#     services = Services.objects.all()
#     for service in services:
#         copy_service_to_model(service, Services_backup_two)
#     print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Services_backup_two –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

# if __name__ == '__main__':
#     # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
#     schedule.every().tuesday.at("07:00").do(backup_to_backup_one)
#     # schedule.every().wednesday.at("10:08").do(backup_to_backup_two)
#     schedule.every().thursday.at("07:00").do(backup_to_backup_two)

#     print("üöÄ backup_base.py –∑–∞–ø—É—â–µ–Ω!")

#     while True:
#         # print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {time.strftime('%H:%M:%S')}")
#         schedule.run_pending()
#         time.sleep(15)

import django
import os
import sys
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (–µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–µ –∏–∑ –∫–æ—Ä–Ω—è)
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
sys.path.append(BASE_DIR)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'async_mysql_project.settings')
django.setup()

from data_app.models import Services, Services_backup_one, Services_backup_two
from django.db import connection, OperationalError

def copy_service_to_model(service, backup_model):
    fields = {f.name: getattr(service, f.name) for f in service._meta.fields if f.name != 'id'}
    backup_model.objects.create(**fields)

def backup_to_backup_one():
    try:
        connection.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ "–∑–∞–≤–∏—Å–ª–æ"
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Services_backup_one...")
        services = Services.objects.all()
        Services_backup_one.objects.all().delete()
        for service in services:
            copy_service_to_model(service, Services_backup_one)
        print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Services_backup_one –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    except OperationalError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ backup_one: {e}")
    finally:
        connection.close()

def backup_to_backup_two():
    try:
        connection.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ "–∑–∞–≤–∏—Å–ª–æ"
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Services_backup_two...")
        services = Services.objects.all()
        Services_backup_two.objects.all().delete()
        for service in services:
            copy_service_to_model(service, Services_backup_two)
        print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Services_backup_two –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    except OperationalError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ backup_two: {e}")
    finally:
        connection.close()

if __name__ == '__main__':
    print("üöÄ backup_base.py –∑–∞–ø—É—â–µ–Ω!")

    while True:
        now = datetime.now()
        current_time = now.strftime('%A %H:%M')  # –ü—Ä–∏–º–µ—Ä: 'Tuesday 07:00'

        try:
            if current_time == "Tuesday 07:00":
            # if current_time == "Monday 09:15":
                backup_to_backup_one()
                time.sleep(60)
            elif current_time == "Thursday 07:00":
            # elif current_time == "Monday 09:16":
                backup_to_backup_two()
                time.sleep(60)
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        finally:
            connection.close()  # –ß–∏—Å—Ç–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–ª–∏

        time.sleep(15)